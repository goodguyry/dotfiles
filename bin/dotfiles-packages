#!/bin/bash
#
# Copyright (c) 2024 Ryan Domingue and contributors
# Report bugs at: https://github.com/goodguyry/dotfiles/issues
#
# This is free software with ABSOLUTELY NO WARRANTY.
#
# usage: dotfiles packages

# Source setup files.
source "${dotfiles_dir}/lib/mkdirs";
source "${dotfiles_dir}/lib/package-installers";
source "${dotfiles_dir}/lib/setfile";
source "${dotfiles_dir}/lib/status";

# Packages to install.
source var/packages.macos.sh;

# Check for Homebrew.
if ! [ -z "$(type -P brew)" ]; then
  status 'Installing Homebrew...';
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

  brew doctor;

  [[ $? ]] \
    && status --success 'Homebrew is ready.' \
    || status --error 'There was a problem installing Homebrew.';
else
  status --info 'Homebrew is already installed.';
fi;

status 'Updating Homebrew...';
brew update;

# Font tools.
brew tap bramstein/webfonttools;
# Alternate versions.
brew tap homebrew/cask-versions;
# Fonts.
brew tap homebrew/cask-fonts;

# Install brews.
[ ${#BREW_LIST[@]} -gt 0 ] && installbrews "${BREW_LIST[@]}";

# Change to bash version installed from Homebrew.
if [[ ! $(grep "/opt/homebrew/bin/bash" /etc/shells) ]]; then
  echo /opt/homebrew/bin/bash|sudo tee -a /etc/shells && chsh -s /opt/homebrew/bin/bash;
  status --info "Shell switched to Homebrew Bash";
else
  status "'/opt/homebrew/bin/bash' is already in /etc/shells";
fi;

# List of directories.
declare -a DIRECTORIES=(
  .vim/backups
  .vim/colors
  .vim/swaps
);

# Create directories.
for DIRECTORY in ${DIRECTORIES[*]}; do
  mkdirs "${HOME}/${DIRECTORY}";
done;

# Download the Solarized Vim theme.
if [[ -f "${HOME}/.vim/colors/solarized.vim" ]]; then
  status 'Solarized Vim theme already installed.';
else
  # status 'Downloading Solarized Vim theme...';
  # Extract colors/solarized.vim into .vim (Linux-friendly).
  curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | \
    tar -xzv -C "${HOME}/.vim" --strip-components 1 --include='**/solarized.vim';

  [[ $? ]] \
    && status --success 'Solarized Vim theme is installed' \
    || status --error 'There was a problem installing the Solarized Vim theme.';
fi;

# Install Git if it's not already installed.
if ! [ -z "$(type -P git)" ]; then
  status 'Installing and configuring Git...';
  brew install git;

  [[ $? != 0 ]] && status --error 'There was a problem installing Git.';
else
  # It should be, since it's in $BREW_LIST, but we check anyhow.
  status --info 'Git is already installed.';
fi

# Additional Git setup.
gitcore="$(brew --prefix git)/share/git-core";

# Adds prepare-commit-msg to global hooks.
mkdirs "${gitcore}/templates/hooks";
set_file 'etc/prepare-commit-msg' "${gitcore}/templates/hooks/prepare-commit-msg";

set_file "home/gitignore" "${HOME}/.gitignore";

# Set up word highlighting.
git_dh="${gitcore}/contrib/diff-highlight/diff-highlight";
[ -s "${git_dh}" ] && ln -sf "${git_dh}" "${HOME}/.bin/diff-highlight";

# Add git config settings.
source gitconfig;

status --success 'Git is installed and configured';

# Install and/or update NVM.
nvm_loc="${HOME}/.nvm";

if [[ ! -d "${nvm_loc}" ]]; then
  status 'Installing NVM...';
  git clone https://github.com/creationix/nvm.git "${nvm_loc}";
fi;

# Make sure NVM is up-to-date.
cd "${nvm_loc}" && git checkout `git describe --abbrev=0 --tags`; cd -;

# Source nvm.
source "${nvm_loc}/nvm.sh";

status 'Installing NPM latest and Node LTS and stable...';

# Install/update NPM.
npm install -g npm@latest;

# Install LTS and stable versions of Node.
nvm install --lts;
nvm install stable;

# Install Node package(s).
status 'Installing Node packages...';

# Install global packages for LTS.
nvm use --lts;
npm install browser-sync --global --quiet;
npm list -g --depth 0;

# Also install stable with the same packages.
nvm use stable;
npm install browser-sync --global --quiet;
npm list -g --depth 0;

# Be sure to switch back to the LTS version.
nvm use --lts;

[[ $? ]] \
  && status --success 'NVM, NPM & Node are ready.' \
  || status --error 'There was a problem with NPM/Node.';

# Install and configure RVM.
if [ ! "$(type -P rvm)" ]; then
  status 'Installing RVM...';
  \curl -sSL https://get.rvm.io | bash -s stable --ignore-dotfiles --autolibs=enable;
fi;

[[ ! -r "${HOME}/.rvmrc" ]] && touch "${HOME}/.rvmrc";

# Enable auto-updating.
[[ -z "$(grep 'rvm_autoupdate_flag' ~/.rvmrc)" ]] && \
  echo rvm_autoupdate_flag=2 >> "${HOME}/.rvmrc";
# Quiet RVM complaints about its position in PATH.
[[ -z "$(grep 'rvm_silence_path_mismatch_check_flag' ~/.rvmrc)" ]] && \
  echo rvm_silence_path_mismatch_check_flag=1 >> "${HOME}/.rvmrc";

# Set Ruby version.
ruby_version='3.3.0';

# Source rvm.
rvm_loc=${rvm_path:="${HOME}/.rvm"};
source "${rvm_loc}/scripts/rvm";

# Update PATH before installing Gems so they end up where intended.
gem_root=${GEM_HOME:="${HOME}/.rvm/gems/ruby-${ruby_version}"};
export PATH=${gem_root}/bin:${gem_root}@global/bin:${MY_RUBY_HOME}/bin:${PATH};

# Install Ruby.
rvm install "ruby-${ruby_version}" --with-out-ext=fiddle;
rvm use "${ruby_version}" --default;

rvm cleanup all;

status 'Installing Gems...';
declare -a gems=(jekyll octopress-autoprefixer rouge sass);
gem install "${gems[@]}" --no-document;

gem cleanup;

[[ $? ]] \
  && status --success 'Ruby Gems are ready.' \
  || status --error 'There was a problem installing Gems.';

# Install Vagrant plugins
vagrant plugin install vagrant-ghost;

# Add Dreambox
# vagrant box add goodguyry/dreambox --provider virtualbox;

[[ $? ]] \
  && status --success "RVM and Ruby are ready." \
  || status --error 'There was a problem installing RVM or Ruby.';
