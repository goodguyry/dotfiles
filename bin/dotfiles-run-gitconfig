#!/bin/bash
# shellcheck disable=SC1091,SC2016
#
# Copyright (c) 2024 Ryan Domingue and contributors
# Report bugs at: https://github.com/goodguyry/dotfiles/issues
# This is free software with ABSOLUTELY NO WARRANTY.

# ------------------------------------------------------------------------------
# usage: dotfiles run gitconfig
#
# Set up Git configuration settings and aliases.
# ------------------------------------------------------------------------------

# Force calling via `dotfiles`.
if test ! $root_command; then
  printf 'usage: %s\n' "$(basename -- "$0" | sed -e 's/-/ /g')";
  exit 1;
fi

# Source setup files.
source "${DOTFILES_ROOT}/lib/status";

# Collect Git author info.
function collect_git_info() {
  # Track status; ends while loop when incremented.
  COLLECTED=0;
  while [[ $COLLECTED -lt 1 ]]; do

    # Prompt for Git user name and email.
    printf 'Your Git author name: -> ';
    read -r NAME;
    printf 'Your Git author email: -> ';
    read -r EMAIL;

    if [[ "${NAME}" != '' && "${EMAIL}" != '' ]] ; then
      # Print Git author info for confirmation.
      printf "\n###  GIT AUTHOR INFO  ###\n"; # Just some dumb formatting.
      echo " Name: ${NAME}";
      echo "Email: ${EMAIL}";
      printf "\n";

      status --warning 'Confirm the Git information above is correct.';

      # Prompt for confirmation.
      printf 'Is this correct? [Y/n] ';
      read -r GIT_AUTHOR;
      printf '\n';

      if [[ "${GIT_AUTHOR}" =~ ^[Yy]$ || "${GIT_AUTHOR}" == '' ]]; then
        # Confirmed; increment status variable.
        COLLECTED=1;
      fi;
    fi;
  done;
}

# Check for git config user.name && git config user.email.
if [[ ! "$(git config user.name)" || ! "$(git config user.email)" ]]; then
    collect_git_info;
else
  NAME="$(git config user.name)";
  EMAIL="$(git config user.email)";
  # Print Git author info for confirmation.
  printf '\n###  GIT AUTHOR INFO  ###\n'; # Just some dumb formatting.
  echo " Name: ${NAME}";
  echo "Email: ${EMAIL}";
  printf '\n';

  status --warning 'Confirm the Git information above is correct.';

  # Seek confirmation that the Git information above is correct.
  printf 'Is this correct? [Y/n] ';
  read -r GIT_AUTHOR;
  printf '\n';

  if ! [[ "${GIT_AUTHOR}" =~ ^[Yy]$ || "${GIT_AUTHOR}" == '' ]]; then
    collect_git_info;
  fi;
fi;

export REPLACED=0;
export ADDED=0;

# Add config values.
function git_config_add() {
  if [[ $(git config "${1}") ]]; then
    REPLACED=$((REPLACED+1))
    git config --global --replace-all "${1}" "${2}";
  else
    ADDED=$((ADDED+1))
    git config --global "${1}" "${2}";
  fi;
}

status --info 'Adding gitconfig options...';

# Aliases

# Amend the currently staged files to the latest commit.
git_config_add alias.amend 'commit --amend --reuse-message=HEAD';
# Show verbose output about branches.
git_config_add alias.branches 'branch -a';
# Show the diff in the commit template.
git_config_add alias.c '!git commit -v';
# Clone a repository including all submodules.
git_config_add alias.cr 'clone --recursive';
# Commit all changes.
git_config_add alias.ca '!git add -A && git commit -av';
# Checkout a branch.
git_config_add alias.co checkout;
# Credit an author on the latest commit.
git_config_add alias.credit '!f() { git commit --amend --author "${1} <${2}>" -C HEAD; }; f';
# Show the diff between the latest commit and the current state.
git_config_add alias.d \
  '!git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat --color | diff-highlight | less -r';
# Print the status of each branch.
git_config_add alias.dashboard '!git branch -vv';
# `git db $branch` shows a histogram of the diff between the current branch and `$branch`.
git_config_add alias.db '!db() { git diff ${1} | diffstat; }; db';
# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
git_config_add alias.di '!d() { git diff --patch-with-stat HEAD~${1}; }; git diff-index --quiet HEAD -- || clear; d';
# Remove branches that have already been merged with master.
git_config_add alias.dm '!git branch --merged | grep -v "\\*" | xargs -n 1 git branch -d';
# diff staged file(s).
git_config_add alias.ds '!clear; git diff --patch-with-stat --staged --color | diff-highlight | less -r';
# Custom graph log (append any tree-ish).
git_config_add alias.graph 'log --pretty --date-order --graph';
# Custom graph log for all branches.
git_config_add alias.grapha 'log --pretty --date-order --graph --all';
# View abbreviated SHA, description, and history graph of the latest 20 commits.
git_config_add alias.l 'log --pretty=oneline -n 20 --graph --abbrev-commit';
# Display the details of the last commit.
git_config_add alias.last 'log -1 HEAD';
# list files from the last commit.
git_config_add alias.ls '!git diff-tree --no-commit-id --name-only -r -1 HEAD';
# list all tracked files.
git_config_add alias.lsa '!git log --pretty=format: --name-only --diff-filter=A | sort -';
# `git m $branch` performs a no fast forward merge.
git_config_add alias.m '!m() { git merge --no-ff ${1}; }; m';
# Switch to a branch, creating it if necessary.
git_config_add alias.new 'checkout -B';
# Pull in remote changes for the current repository and all its submodules.
git_config_add alias.p '!git pull; git submodule foreach git pull origin master';
# Stage files in patches.
git_config_add alias.patch '!p() { git add ${@} -N; git add ${@} --patch; }; p';
# Push and track HEAD to origin (useful for long/complicated branch names).
git_config_add alias.ph '!git push -u origin HEAD';
# Interactive rebase with the given number of latest commits.
git_config_add alias.reb '!r() { git rebase -i HEAD~${1}; }; r';
# Remove the old tag with this name and tag the latest commit with it.
git_config_add alias.retag '!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r';
# Show verbose output about remotes.
git_config_add alias.remotes 'remote -v';
# View the current working tree status using the short format.
git_config_add alias.s 'status -s';
# View the current working tree status.
git_config_add alias.st 'status';
# `git stats $n` log stats for a given number of commits.
git_config_add alias.stats '!l() { git log --stat -${1} --pretty=oneline --abbrev-commit; }; l';
# Show verbose output about tags.
git_config_add alias.tags 'tag -l';
# Print the tracking branch, if any.
git_config_add alias.tracking "!git for-each-ref --format='%(upstream:short)' \"$(git symbolic-ref -q HEAD)\"";
# `git unstage [file]` Unstages a file or the entire index.
git_config_add alias.unstage 'reset HEAD --';
# Show the user email for the current repository.
git_config_add alias.whoami "config user.email";

# Branches

# Use `origin` as the default remote on the `master` branch in all cases.
git_config_add branch.develop.merge 'refs/heads/develop';
git_config_add branch.develop.remote 'origin';
# Use `origin` as the default remote on the `develop` branch in all cases.
git_config_add branch.master.merge 'refs/heads/master';
git_config_add branch.master.remote 'origin';

# Colors

# Branch
git_config_add color.branch.current 'green reverse';
git_config_add color.branch.local 'green';
git_config_add color.branch.plain 'normal';
git_config_add color.branch.remote 'yellow';
git_config_add color.branch.upstream 'yellow';
# Diff highlight http://theunixtoolbox.com/git-diff-highlight/
git_config_add color.diff-highlight.newhighlight 'green bold 22';
git_config_add color.diff-highlight.newnormal green;
git_config_add color.diff-highlight.oldhighlight 'red bold 52';
git_config_add color.diff-highlight.oldnormal 'red';
# Diff
git_config_add color.diff.commit 'yellow';
git_config_add color.diff.frag 'cyan';
git_config_add color.diff.func 'normal';
git_config_add color.diff.meta 'yellow';
git_config_add color.diff.new 'green';
git_config_add color.diff.old 'red';
# Status
git_config_add color.status.added 'green';
git_config_add color.status.branch 'bold';
git_config_add color.status.changed 'yellow';
git_config_add color.status.header 'normal';
git_config_add color.status.nobranch 'red reverse';
git_config_add color.status.unmerged 'blue';
git_config_add color.status.untracked 'red';

# Use colors in Git commands that are capable of colored output when outputting to the terminal.
git_config_add color.ui auto;

# Core

git_config_add core.autocrlf 'input';
git_config_add core.bare false;
git_config_add core.editor 'vim';
# Use custom '.gitignore'.
git_config_add core.excludesfile "${HOME}/.gitignore";
git_config_add core.filemode true;
git_config_add core.ignorecase true;
git_config_add core.logallrefupdates true;
# http://theunixtoolbox.com/git-diff-highlight/
git_config_add core.pager 'diff-highlight | less -r';
# git_config_add core.pager '`brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less';
git_config_add core.precomposeunicode true;
git_config_add core.repositoryformatversion 0;
git_config_add core.safecrlf true;
# Make `git rebase` safer on macOS
# http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
git_config_add core.trustctime false;
# Spaces before tabs, lines indented with 8 or more spaces, and all kinds of trailing whitespace are errors.
git_config_add core.whitespace 'space-before-tab,indent-with-non-tab,trailing-space';
# Speed up commands involving untracked files such as `git status`.
# https://git-scm.com/docs/git-update-index#_untracked_cache
git_config_add core.untrackedCache true;

# Misc

# Detect whitespace errors when applying a patch.
git_config_add apply.whitespace 'fix';

$IS_MACOS && HELPER='osxkeychain' || HELPER='store';
git_config_add credential.helper "${HELPER}";

# Automatically correct and execute mistyped commands.
git_config_add help.autocorrect 1;
# Include summaries of merged commits in newly created merge commit messages.
git_config_add merge.log true;
git_config_add mergetool.keepbackup true;
# tut: http://gitimmersion.com/lab_10.html
# ref: http://linux.die.net/man/1/git-log
# Result: <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
git_config_add pretty.nice '%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar';
# https://git-scm.com/docs/git-config#git-config-pushdefault
git_config_add push.default 'simple';
# How to reconcile divergent branches
git_config_add pull.rebase false;
# Make `git push` push relevant annotated tags when pushing branches out.
git_config_add push.followTags true;
# Detect copies as well as renames.
git_config_add diff.renames copies;

# URL Shorthands

git_config_add url.git://gist.github.com/.insteadof 'gist:';
git_config_add url.git://github.com/.insteadof 'github:';
git_config_add url.git@gist.github.com:.insteadof 'gst:';
git_config_add url.git@gist.github.com:.pushinsteadof 'gist:';
git_config_add url.git@gist.github.com:.pushinsteadof 'git://gist.github.com/';
git_config_add url.git@github.com:.insteadof 'gh:';
git_config_add url.git@github.com:.pushinsteadof 'git://github.com/';
git_config_add url.git@github.com:.pushinsteadof 'github:';

# User

git_config_add user.name "${NAME}";
git_config_add user.email "${EMAIL}";

if [[ $? ]]; then
  status --success "${REPLACED} gitconfig options replaced; ${ADDED} added.";
else
  status --error 'There was a problem configuring Git.';
fi
