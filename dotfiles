#!/bin/bash
# shellcheck disable=SC1091
#
# Copyright (c) 2024 Ryan Domingue and contributors
# Report bugs at: https://github.com/goodguyry/dotfiles/issues
# This is free software with ABSOLUTELY NO WARRANTY.

# ------------------------------------------------------------------------------
# usage: dotfiles
#
# Sets up shell configuration files.
# ------------------------------------------------------------------------------

bold=$(tput bold);
reset=$(tput sgr0);
dashless=$(basename -- "$0" | sed -e 's/-/ /');
USAGE="
   or: ${dashless} --prefix
   or: ${dashless} sync
   or: ${dashless} install <option>
   or: ${dashless} run <option>

'dotfiles' with no subcommand synlinks shell configuration files, functions, and
executables to the user home directory.

---

  --prefix              Prints the dotfiles directory and exit.

Subcommands and available options:

  ${bold}sync${reset}   Sets up shell configuration files.

  ${bold}install${reset}

    packages            Installs Homebrew, CLI packages; NVM, Node, and NPM;
                        RVM, Ruby and Gems.

    apps                Installs Homebrew casks and App Store apps.

  ${bold}run${reset}

    preferences         Sets system-wide macOS preferences.
                        ${bold}Read through bin/dotfiles-run-preferences to know what
                        settings and applications will be impacted before executing
                        the file${reset}.

    gitconfig           Sets up the global .gitconfig file. This is automatically run
                        during git setup, but can be run independently.
";

DOTFILES_ROOT=$(dirname "$(realpath "${BASH_SOURCE[0]}")");
export DOTFILES_ROOT;

export PATH="${PATH}:${DOTFILES_ROOT}/bin";

# Source setup files.
source "${DOTFILES_ROOT}/lib/setfile";
source "${DOTFILES_ROOT}/lib/status";
source "${DOTFILES_ROOT}/lib/mmkd";
source "${DOTFILES_ROOT}/home/functions/print-usage";

if test "$1" = --prefix; then
  echo "${DOTFILES_ROOT}";
  exit 0;
fi

subcommand=$1;
option=$2;

# Handle subcommands.
declare -a valid_subcommands=(sync install run);
has_valid_subcommand=$(printf "%s\n" "${valid_subcommands[@]}" | grep -c "^${subcommand}$");

# Catch unknown subcommands.
if test $has_valid_subcommand = 0; then
  print_usage;
  status --error "Unknown subcommand: '${subcommand}'.";
fi

# Catch missing subcommand option.
if test $# -eq 1; then
  case "${subcommand}" in
    install|run)
      print_usage;
      status --error "'dotfiles ${subcommand}' requires an additional argument.";
      ;;
  esac
fi

command_suffix="${subcommand}-${option}";
if [[ "" == "${option}" ]]; then
  command_suffix="${subcommand}";
fi

if [[ -x "${DOTFILES_ROOT}/bin/dotfiles-${command_suffix}" ]]; then
  "dotfiles-${command_suffix}";
else
  print_usage;
  status --error "Unknown sub-command '${command_suffix/-/ }'.";
fi
