#!/bin/bash
#
# Copyright (c) 2024 Ryan Domingue and contributors
# Report bugs at: https://github.com/goodguyry/dotfiles/issues
#
# This is free software with ABSOLUTELY NO WARRANTY.
#
# usage: dotfiles [packages|apps]

export dotfiles_dir="${HOME}/.dotfiles";
export dotfiles_bin="${HOME}/.dotfiles/bin";

# @todo Protect PATH.
export PATH="${PATH}:${dotfiles_bin}";

# Source setup files.
source "${dotfiles_dir}/lib/mkdirs";
source "${dotfiles_dir}/lib/setfile";
source "${dotfiles_dir}/lib/status";

# @todo Confirm.

# @todo Print script details.

status "Symlinking files to ${HOME}";

declare -a home_files=(
  'home/aliases'
  'home/bash_config'
  'home/bashrc'
  'home/completions'
  'home/hushlogin'
  'home/inputrc'
  'home/paths'
  'home/profile'
  'home/prompt'
  'home/vimrc'
);

# Link home dotfiles files.
for home_file in "${home_files[@]}"; do
  [[ -f "${home_file}" ]] && setfile "${home_file}" "${HOME}/.$(basename $home_file)";
done;

# Link function files.
mkdirs "${HOME}/.functions";
if [[ $? ]]; then
  for function_file in home/functions/*; do
    [[ -f "${function_file}" ]] && setfile "${function_file}" "${HOME}/.functions/$(basename $function_file)";
  done;
else
  status --error "Could not create ${HOME}/.functions"
fi

# Link commands into PATH.
for bin_file in home/bin/*; do
  [[ -f "${bin_file}" ]] && setfile "${bin_file}" "${HOME}/.bin/$(basename $bin_file)";
done;

# Always copy editorconfig (can't remember why).
rsync -avz --quiet 'home/editorconfig' "${HOME}/.editorconfig";

# Create dotfiles.local if not present.
if [[ ! -r "${HOME}/.dotfiles.local" ]]; then
  status "Creating ${HOME}/.dotfiles.local";
  printf '#!/bin/bash\n\n' >> "${HOME}/.dotfiles.local";
fi;

# Source bashrc to make sure the environment is set before moving on.
source "${HOME}/.bashrc";
status --success "Done syncing files to ${HOME}";

sub="${1}"; shift;
[[ "" == "${sub}" ]] && exit 0;

if [[ -x "${dotfiles_bin}/dotfiles-${sub}" ]]; then
  "dotfiles-${sub}";
  exit $?;
else
  printf '%s\n' "dotfiles: Unknown sub-command '${sub}'." >&2;
  exit 1;
fi
