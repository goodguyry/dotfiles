#!/bin/bash
# shellcheck disable=SC1091
#
# Copyright (c) 2024 Ryan Domingue and contributors
# Report bugs at: https://github.com/goodguyry/dotfiles/issues
# This is free software with ABSOLUTELY NO WARRANTY.

# ------------------------------------------------------------------------------
# usage: dotfiles
#
# Sets up shell configuration files.
# ------------------------------------------------------------------------------

bold=$(tput bold);
reset=$(tput sgr0);
dashless=$(basename -- "$0" | sed -e 's/-/ /');

# shellcheck disable=SC2034
USAGE="[-h | --help]
   or: ${dashless} --prefix
   or: ${dashless} sync <option>
   or: ${dashless} install <option>
   or: ${dashless} run <option>

---

  -h,--help             Print usage information.

  --prefix              Print the dotfiles directory and exit.

Subcommands and available options:

  ${bold}sync${reset}

    home                Sets up shell configuration files.

  ${bold}install${reset}

    packages            Installs Homebrew, CLI packages; NVM, Node, and NPM;
                        RVM, Ruby and Gems.

    apps                Installs Homebrew casks and App Store apps.

  ${bold}run${reset}

    preferences         Sets system-wide macOS preferences.
                        ${bold}Read through bin/dotfiles-run-preferences to know what
                        settings and applications will be impacted before executing
                        the file${reset}.

    gitconfig           Sets up the global .gitconfig file. This is automatically run
                        during git setup, but can be run independently.
";

dotfiles_root=$(dirname "$(realpath "${BASH_SOURCE[0]}")");
export PATH="${PATH}:${dotfiles_root}/bin";

# Source setup files.
source "${dotfiles_root}/home/functions/print-usage";
source "${dotfiles_root}/lib/mmkd";
source "${dotfiles_root}/lib/setfile";
source "${dotfiles_root}/lib/status";

# Test for options.
while [ $# -gt 0 ]; do
  case "$1" in
    sync|install|run) subcommand=$1; option=$2; ;;
    --prefix) subcommand="prefix"; option=$2; ;;
    -h|--help)
      print_usage;
      exit 0;
      ;;
  esac

  shift;
done;

if [[ "prefix" == "${subcommand}" ]]; then
  if [[ -x "${HOME}/.dotfiles/dotfiles-prefix" ]]; then
    # shellcheck disable=SC1090
    source "${HOME}/.dotfiles/dotfiles-prefix" "${option:-dotfiles}";
  fi

  exit 0;
fi

# Handle subcommands.
declare -a valid_subcommands=(sync install run);
has_valid_subcommand=$(printf "%s\n" "${valid_subcommands[@]}" | grep -c "^${subcommand}$");

# Catch unknown subcommands.
if test "$has_valid_subcommand" = 0; then
  print_usage;
  status --error "Unknown subcommand: '${subcommand}'.";
fi

# Catch missing subcommand option.
if test $# -eq 1; then
  print_usage;
  status --error "'dotfiles ${subcommand}' requires an additional argument.";
fi

command_suffix="${subcommand}-${option}";
if [[ "" == "${option}" ]]; then
  command_suffix="${subcommand}";
fi

if [[ -x "${HOME}/.dotfiles/dotfiles-${command_suffix}" ]]; then
  # shellcheck disable=SC1090
  source "${HOME}/.dotfiles/dotfiles-${command_suffix}";
else
  print_usage;
  status --error "Unknown sub-command '${command_suffix/-/ }'.";
fi
