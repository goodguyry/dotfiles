[core]
  # Use custom '.gitignore'
  excludesfile = ~/.gitignore

  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
  whitespace = space-before-tab,indent-with-non-tab,trailing-space
  autocrlf = input
  safecrlf = true
  editor = vim

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

[alias]
  # Clone a repository including all submodules
  c = clone --recursive

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Switch to a branch, creating it if necessary
  new = checkout -B

  # Checkout a branch
  co = checkout

  # View the current working tree status
  st = status

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # diff staged file(s)
  ds = !"clear; git diff --patch-with-stat --staged"

  # `git db $branch` shows a histogram of the diff between the current branch and `$branch`
  db = !"db() { git diff $1 | diffstat; }; db"

  # `git m $branch` performs a no fast forward merge
  m = !"m() { git merge --no-ff $1; }; m"

  # Custom graph log (append any tree-ish)
  graph = log --pretty --date-order --graph

  # Custom graph log for all branches
  grapha = log --pretty --date-order --graph --all

  # `git unstage [file]` Unstages a file or the entire index
  unstage = reset HEAD --

  # Commit all changes
  ca = !git add -A && git commit -av

  # Display the details of the last commit
  last = log -1 HEAD

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # `git stats $n` log stats for a given number of commits
  stats = !"l() { git log --stat -$1 --pretty=oneline --abbrev-commit; }; l"

  # list files from the last commit
  ls = !"git diff-tree --no-commit-id --name-only -r -1 HEAD"

  # list all tracked files
  lsa = !"git log --pretty=format: --name-only --diff-filter=A | sort -"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Custom graph log (append any tree-ish)
  graph = log --pretty=nice --date-order --graph

  # Custom graph log for all branches
  grapha = log --pretty=nice --date-order --graph --all

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
  ui = auto
  [color "branch"]
  current = green reverse
  local = green
  remote = yellow
  [color "diff"]
  meta = cyan
  frag = magenta
  old = red
  new = green
  [color "status"]
  added = green
  changed = yellow
  untracked = red

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

  # Use `origin` as the default remote on the `master` branch in all cases
  [branch "master"]
  remote = origin
  merge = refs/heads/master

  # URL shorthands
  [url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
  [url "git://github.com/"]
  insteadOf = "github:"
  [url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
  [url "git://gist.github.com/"]
  insteadOf = "gist:"

[push]
  default = matching

[credential]
  helper = osxkeychain

[mergetool]
  keepBackup = true

[help]
  autocorrect = 1

[pretty]
  # tut: http://gitimmersion.com/lab_10.html
  # ref: http://linux.die.net/man/1/git-log
  # Result: <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
  nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"
