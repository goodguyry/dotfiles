#!/bin/bash
#
# Copyright (c) 2024 Ryan Domingue and contributors
# Report bugs at: https://github.com/goodguyry/dotfiles/issues
#
# This is free software with ABSOLUTELY NO WARRANTY.
#
# usage: git check [branch {'main'}] [branch {HEAD}]
#
# Prints the number of commits the second branch is ahead/behind of first branch.
#
# Optional: Customize the main branch in your gitconfig.s
# > git config git-compare.main "production"

SUBDIRECTORY_OK=1;
OPTIONS_SPEC=;
USAGE="[branch {'main'}] [branch {HEAD}]

Prints the number of commits the second branch is ahead/behind of first branch.

Optional: Configure the main branch in your gitconfig.
> git config git-compare.main \"production\"
";

# Uses git-sh-setup.
# https://git-scm.com/docs/git-sh-setup
# https://github.com/git/git/blob/master/git-sh-setup.sh
. "$(git --exec-path)/git-sh-setup";

# We must be within the working tree of the repository.
require_work_tree;

# Bypass the default '--' arg.
test "$1" == -- && { shift; }

# Set colors.
deep_green=$(tput setaf 112);
yellow=$(tput setaf 222);
reset=$(tput sgr0);

# Merge any additional branches from the config.
config_git_compare_main=$(git config git-compare.main);
main=${config_git_compare_main:-main};

base=${1:-$main};

# Use the current branch as the main working branch.
current=$(git symbolic-ref -q --short HEAD);
compare=${2:-$current};

if ! git show-ref --quiet "refs/heads/${base}"; then
  echo "Base branch '${base}' not found.";
  die;
fi

if ! git show-ref --quiet "refs/heads/${compare}"; then
  echo "Compare branch '${compare}' not found.";
  die;
fi

# run git rev-list and capture numbers returned.
result="$(git rev-list --left-right --count ${base}...${compare})";

numbers=(${result});

# print numbers in a pretty message.
if [ ${numbers[0]} -gt 0 ]; then
  echo -e "${yellow}- ${compare} is ${numbers[0]} commits behind ${base}${reset}";
fi

if [ ${numbers[1]} -gt 0 ]; then
  echo -e "${deep_green}+ ${compare} is ${numbers[1]} commits ahead of ${base}${reset}";
fi;
