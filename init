#!/bin/bash
# Move dotfiles into place, install necessary software and setup development environment


DOTFILES_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
DOTFILES_GIT_REMOTE="https://github.com/goodguyry/dotfiles"

# Source utils
source "${DOTFILES_DIRECTORY}/utils/logger.sh";


# Help text
function show_help() {

cat <<EOT

Dotfiles - Ryan Domingue - http://ryandomingue.com/

Usage: $(basename "$0") [options]

Options:
    -h, --help            Print this help text
    -c, --copy            Copy the files in place instead of linking
    -n, --no-packages     Suppress package installations and updates (including casks)
    -s, --server          Skip OS X-related packages/settings

 Notes: '--copy' and '--server' also suppress initializing a Git repo and pulling updates from Github

Documentation can be found at https://github.com/goodguyry/dotfiles

Copyright (c) Ryan Domingue
Licensed under the MIT license.
EOT

}


# Create a directory if it doesn't already exist
function mkdirs() {
  if [[ ! -d "${@}" ]]; then
    mkdir "${@}";
    echo "Created ${@}";
  fi;
}


# Helper function
# Conditionally symlink or copy the files
function set_file() {
  local SRC="${DOTFILES_DIRECTORY}/${1}";
  local DEST="$2";
  if [[ $COPY_FILES ]]; then
    # Copy with rsync
    rsync -avz --quiet "${SRC}" "${DEST}";
  else
    # Force create/replace the symlink.
    ln -fs "${SRC}" "${DEST}";
  fi
}


# Show help text
if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
  show_help;
  exit;
fi;


# Test for known flags
for OPT in "${@}";
do
  case "${OPT}" in
    --no-packages)  NO_PACKAGES=true ;;               # Suppresses installing packages
               -n)  NO_PACKAGES=true ;;
           --copy)  COPY_FILES=true ;;                # Copy files instead of linking
               -c)  COPY_FILES=true ;;
         --server)  SERVER=true; NO_PACKAGES=true ;;  # Skip OS X-related packages/settings
               -s)  SERVER=true; NO_PACKAGES=true ;;
           -*|--*)  log_warning "Warning: invalid option ${OPT}" && show_help && exit ;;
  esac
done;


# Create a Projects folder
if [[ ! ${SERVER} ]]; then
  mkdirs "${HOME}/Projects";
fi;


# Create a ~/.bin directory, if it doesn't exist
mkdirs "${HOME}/.bin";


# Conditionally install Command Line Tools, Homebrew and Git
if [[ ${SERVER} ]]; then
  log_header 'Skipping Homebrew and Git installations.';
else
  source "${DOTFILES_DIRECTORY}/utils/brew-check.sh";

  # Install Git from Homebrew
  log_header 'Updating Homebrew...';
  brew update;
  log_header 'Installing Git...';
  brew install git;
  ln -sf "$(brew --prefix)/share/git-core/contrib/diff-highlight/diff-highlight" "${HOME}/.bin/diff-highlight";
fi;


# Conditionally init and pull the Git repo
if [[ ! ${COPY} || ! ${SERVER} ]] && [ "$(type -P git)" ] ; then
  cd "${DOTFILES_DIRECTORY}";
  # Initialize the git repository if it's missing
  if ! $(git rev-parse --is-inside-work-tree &> /dev/null); then
    log_header 'Initializing git repository...';
    git init;
    git remote add origin "${DOTFILES_GIT_REMOTE}";
    git fetch origin master;
    # Reset the index and working tree to the fetched HEAD
    git reset --hard FETCH_HEAD;
    # Remove any untracked files
    git clean -fd;
    log_header 'Syncing dotfiles...';
    # Pull down the latest changes
    git pull --rebase origin master;
  else
    log_header 'Already a Git repo.';
  fi;
else
  log_header 'Skipping \`git init\`';
fi;


# Sets the dotfiles in place in the `HOME` directory.
function set_files() {
  log_header 'Setting files...';

  # List of directories
  declare -a DIRECTORIES=(
    .vim/backups
    .vim/swaps
  );

  # Create directories
  for DIRECTORY in ${DIRECTORIES[*]}; do
    if [[ ! -d "${HOME}/${DIRECTORY}" ]]; then
      mkdir -p "${HOME}/${DIRECTORY}";
      echo "Created ${HOME}/${DIRECTORY}";
    fi;
  done;

  # Dev
  set_file 'dev/gitignore'                        "${HOME}/.gitignore";
  set_file 'dev/jshintrc'                         "${HOME}/.jshintrc";
  set_file 'dev/vimrc'                            "${HOME}/.vimrc";

  # Always copy editorconfig
  rsync -avz --quiet 'dev/editorconfig'           "${HOME}/.editorconfig";

  # Shell
  set_file 'shell/aliases'                        "${HOME}/.aliases";
  set_file 'shell/bash_config'                    "${HOME}/.bash_config";
  set_file 'shell/bashrc'                         "${HOME}/.bashrc";
  set_file 'shell/functions'                      "${HOME}/.functions";
  set_file 'shell/hushlogin'                      "${HOME}/.hushlogin";
  set_file 'shell/inputrc'                        "${HOME}/.inputrc";
  set_file 'shell/paths'                          "${HOME}/.paths";
  set_file 'shell/profile'                        "${HOME}/.profile";
  set_file 'shell/prompt'                         "${HOME}/.prompt";


  # Download the Solarized Vim theme
  # But check for it first
  if [[ ! -r "${HOME}/.vim/colors/solarized.vim" ]]; then
    if [[ ${SERVER} ]]; then
      # Extract colors/solarized.vim into .vim (Linux-friendly)
      log_header 'Downloading Solarized Vim theme...';
      curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | \
        tar -xzv -C "${HOME}/.vim" --strip-components 1 --wildcards '**/solarized.vim';
    else
      # Extract colors/solarized.vim into .vim (OS X-Friendly)
      log_header 'Downloading Solarized Vim theme...';
      curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | \
        tar -xzv -C "${HOME}/.vim" --strip-components 1 --include='**/solarized.vim';
    fi;
    [[ $? ]] && log_success 'Solarized Vim theme installed';
  else
    log_header 'Solarized Vim theme already installed.';
  fi;

  log_success 'Dotfiles update complete!';
}


# Ask before potentially overwriting files
printf '\n';
log_warning 'Warning: This step may overwrite your existing dotfiles.';
printf 'Continue? [Y/n]';
read CONTINUE;
printf '\n';


# Conditionally set the dotfiles in place
if [[ "${CONTINUE}" == 'n' ]]; then
  log_header 'Aborting...';
  exit 1;
else
  set_files;
fi;


# Create dotfiles.local if not present
[[ ! -r "${HOME}/.dotfiles.local" ]] && printf '#!/bin/bash\n\n' >> "${HOME}/.dotfiles.local";


# Add git config settings
source scripts/gitconfig;


# Source bashrc to make sure the environment is set before moving on
source "${HOME}/.bashrc";


# Conditionally install packages
if [[ $NO_PACKAGES ]]; then
  log_header 'Skipping package installation...';
else
  # Install Homebrew packages
  source scripts/brews;
  # Install App Store apps
  source scripts/appstore;
  # Install Homebrew packages
  source scripts/nvm;
  # Install Homebrew packages
  source scripts/rvm;
  # Set up Sublime Text
  source scripts/sublime;

  # Change to bash 4 installed by bin/brews
  if [[ ! "$(grep "/usr/local/bin/bash" /etc/shells)" ]]; then
    echo /usr/local/bin/bash|sudo tee -a /etc/shells && chsh -s /usr/local/bin/bash;
    log_success 'Shell switched to Bash 4';
  else
    log_header "'/usr/local/bin/bash' already in /etc/shells";
  fi;
fi;


if [[ ! ${SERVER} ]]; then
  # Ask before potentially overwriting files
  printf '\n';
  log_warning 'Warning: This step may modify your OS X system defaults.';
  printf 'Continue? [Y/n] ';
  read SET_OSX;
  printf '\n';


  # Conditionally set defaults
  if [[ "${SET_OSX}" == 'n' ]]; then
    log_header 'Skipped OS X settings update.';
  else
    source scripts/macos;
  fi;
fi;


unset COPY_FILES;


[[ $? ]] && log_success 'Restarting the shell to apply changes';

exec $SHELL -l;
