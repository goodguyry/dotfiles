#!/bin/bash

##
# Move dotfiles into place, install necessary software and setup development environment.
##

DOTFILES_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
DOTFILES_GIT_REMOTE="https://github.com/goodguyry/dotfiles"

# Source utils
source "${DOTFILES_DIRECTORY}/utils/logger.sh";
source "${DOTFILES_DIRECTORY}/utils/helpers.sh";

# Help text.
function show_help() {

cat <<EOT

Dotfiles - Ryan Domingue - http://ryandomingue.com/

Usage: $(basename "$0") [options]

Options:
    --help            Print this help text
    --copy            Copy the files in place instead of symlinking
    --server          Skip packages/settings not applicable to a server
    --distro          Install Linux packages & settings
    --skip-packages   Suppress all package installations and updates
    --skip-git-init   Do not initialize a Git repo

Notes:
'editorconfig' is always copied.

Documentation can be found at https://github.com/goodguyry/dotfiles

Copyright (c) Ryan Domingue
Licensed under the MIT license.
EOT

}

# Show help text.
if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
  show_help;
  exit;
fi;

# Test for known flags.
for OPT in "${@}";
do
  case "${OPT}" in
             --copy)  COPY_FILES=true ;;    # Copy the files in place instead of symlinking
           --server)  SERVER=true; ;;       # Skip packages/settings not applicable to a server
           --distro)  DISTRO=true; ;;       # Install Linux packages & settings
    --skip-packages)  SKIP_PACKAGES=true ;; # Suppress all package installations and updates
    --skip-git-init)  SKIP_GIT_INIT=true ;; # Do not initialize a Git repo
             -*|--*)  log_warning "Warning: invalid option ${OPT}" && show_help && exit ;;
  esac
done;

# Ask before proceeding.
printf '\n';
log_warning 'This script will do the following:';
MESSAGE="$(get_init_prompt)";
echo -e "${MESSAGE}";
printf 'Continue? [Y/n]';
read CONTINUE;
printf '\n';

# Exit if denied.
if [[ "${CONTINUE}" == 'n' ]]; then
  log_header 'Aborting...';
  exit 1;
fi;

# Create a Projects folder.
[ ! $SERVER ] && mkdirs "${HOME}/Projects";

# Create a ~/.bin directory, if it doesn't exist.
mkdirs "${HOME}/.bin";

# Conditionally install Command Line Tools, Homebrew and Git.
if [ $SKIP_PACKAGES ]; then
  log_header 'Skipping Homebrew and Git installations.';
else
  log_header 'Installing Homebrew...';
  source "${DOTFILES_DIRECTORY}/utils/brew-check.sh";

  log_header 'Installing Git...';

  if $DISTRO; then
    sudo add-apt-repository ppa:git-core/ppa;
    sudo apt update;
    sudo apt-get install git;
    # Set up word highlighting.
    [ -s /usr/share/doc/git/contrib/diff-highlight ] \
      && ln -sf "/usr/share/doc/git/contrib/diff-highlight" "${HOME}/.bin/diff-highlight";
  else
    # Install Git from Homebrew for macOS
    brew install git;
    # Set up word highlighting.
    [ -s $(brew --prefix)/share/git-core/contrib/diff-highlight/diff-highlight ] \
      && ln -sf "$(brew --prefix)/share/git-core/contrib/diff-highlight/diff-highlight" "${HOME}/.bin/diff-highlight";
  fi
fi;

# Conditionally init and pull the Git repo.
if [ $SKIP_GIT_INIT ]; then
  log_header 'Skipping `git init`';
elif [ "$(type -P git)" ]; then
  cd "${DOTFILES_DIRECTORY}";
  # Initialize the git repository if it's missing.
  if $(git rev-parse --is-inside-work-tree &> /dev/null); then
    log_header 'Already a Git repo.';
  else
    log_header 'Initializing git repository...';
    git init;
    git remote add origin "${DOTFILES_GIT_REMOTE}";
    git fetch origin master;
    # Reset the index and working tree to the fetched HEAD.
    git reset --hard FETCH_HEAD;
    # Remove any untracked files.
    git clean -fd;
    log_header 'Syncing dotfiles...';
    # Pull down the latest changes.
    git pull --rebase origin master;
  fi;
else
  log_header 'Git is not installed';
fi;

# Sets the dotfiles in place in the `HOME` directory.
log_header 'Setting files...';

# List of directories.
declare -a DIRECTORIES=(
  .vim/backups
  .vim/swaps
);

# Create directories.
for DIRECTORY in ${DIRECTORIES[*]}; do
  if [[ ! -d "${HOME}/${DIRECTORY}" ]]; then
    mkdir -p "${HOME}/${DIRECTORY}";
    echo "Created ${HOME}/${DIRECTORY}";
  fi;
done;

# Dev
set_file 'dev/gitignore'                        "${HOME}/.gitignore";
set_file 'dev/jshintrc'                         "${HOME}/.jshintrc";
set_file 'dev/vimrc'                            "${HOME}/.vimrc";

# Always copy editorconfig.
rsync -avz --quiet 'dev/editorconfig'           "${HOME}/.editorconfig";

# Shell
set_file 'shell/aliases'                        "${HOME}/.aliases";
set_file 'shell/bash_config'                    "${HOME}/.bash_config";
set_file 'shell/bashrc'                         "${HOME}/.bashrc";
set_file 'shell/functions'                      "${HOME}/.functions";
set_file 'shell/hushlogin'                      "${HOME}/.hushlogin";
set_file 'shell/inputrc'                        "${HOME}/.inputrc";
set_file 'shell/paths'                          "${HOME}/.paths";
set_file 'shell/profile'                        "${HOME}/.profile";
set_file 'shell/prompt'                         "${HOME}/.prompt";

# Download the Solarized Vim theme.
if test -f "${HOME}/.vim/colors/solarized.vim"; then
  log_header 'Solarized Vim theme already installed.';
else
  log_header 'Downloading Solarized Vim theme...';
  # Extract colors/solarized.vim into .vim (Linux-friendly).
  if $DISTRO; then
    # Linux-friendly.
    curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | \
      tar -xzv -C "${HOME}/.vim" --strip-components 1 --wildcards '**/solarized.vim';
  else
    # macOS-Friendly.
    curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | \
      tar -xzv -C "${HOME}/.vim" --strip-components 1 --include='**/solarized.vim';
  fi;
  [[ $? ]] && log_success 'Solarized Vim theme installed';
fi;

log_success 'Dotfiles update complete!';

# Create dotfiles.local if not present.
[[ ! -r "${HOME}/.dotfiles.local" ]] && printf '#!/bin/bash\n\n' >> "${HOME}/.dotfiles.local";

# Add git config settings.
source scripts/gitconfig;

# Source bashrc to make sure the environment is set before moving on.
source "${HOME}/.bashrc";

# Conditionally install packages.
if [ $SKIP_PACKAGES ]; then
  log_header 'Skipping package installation...';
elif [[ $DISTRO ]]; then
  source scripts/packages.linux.sh;
else
  source scripts/packages.macos.sh;
fi;

if [[ $SERVER || $DISTRO ]]; then
  log_header 'Skipped macOS settings update.';
else
  # Ask before potentially overwriting files.
  printf '\n';
  log_warning 'Warning: This step may modify your macOS system defaults.';
  printf 'Continue? [Y/n] ';
  read SET_MACOS;
  printf '\n';

  # Conditionally set defaults.
  if [[ "${SET_MACOS}" == 'n' ]]; then
    log_header 'Skipped macOS settings update.';
  else
    source scripts/macos;
  fi;
fi;

unset COPY_FILES;

[[ $? ]] && log_success 'Restarting the shell to apply changes';

exec $SHELL -l;
