#!/bin/bash

DOTFILES_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
DOTFILES_GIT_REMOTE="https://github.com/goodguyry/dotfiles"


# Helper functions
source "$DOTFILES_DIRECTORY/lib/help";
source "$DOTFILES_DIRECTORY/lib/utils";


# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help;
  exit;
fi;


# Test for known flags
for opt in $@;
do
  case $opt in
    --no-packages) NO_PACKAGES=true ;;            # Suppresses installing packages
    --copy) COPY_FILES=true ;;                    # Copy files instead of linking
    --server) SERVER=true; NO_PACKAGES=true ;;    # Skip OS X-related packages/settings
    -*|--*) e_warning "Warning: invalid option $opt" && run_help && exit ;;
  esac
done;


# Create a Projects folder
if [[ ! $SERVER ]]; then
  mkdirs "$HOME/Projects";
fi;


# Create a ~/.bin directory, if it doesn't exist
mkdirs "$HOME/.bin";


# Conditionally install Command Line Tools, Homebrew and Git
if [[ $NO_PACKAGES ]]; then
  e_header "Skipping Homebrew and Git installations.";
else
  # Before relying on Homebrew, check that packages can be compiled
  if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first.";
    xcode-select --install;
  fi;

  # Check for Homebrew
  if ! type_exists 'brew'; then
    e_header "Installing Homebrew...";
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)";
    brew doctor;
    [[ $? ]] && e_success "Homebrew installed.";
  fi;

  # Check for git
  if ! type_exists 'git'; then
    e_header "Updating Homebrew...";
    brew update;
    e_header "Installing Git...";
    brew install git;
    ln -sf "$(brew --prefix)/share/git-core/contrib/diff-highlight/diff-highlight" "$HOME/.bin/diff-highlight";
  fi;
fi;


# Conditionally init and pull the Git repo
if [[ ! $COPY || ! $SERVER ]] && type_exists 'git' ; then
  cd "$DOTFILES_DIRECTORY";
  # Initialize the git repository if it's missing
  if ! is_git_repo; then
    e_header "Initializing git repository...";
    git init;
    git remote add origin $DOTFILES_GIT_REMOTE;
    git fetch origin master;
    # Reset the index and working tree to the fetched HEAD
    git reset --hard FETCH_HEAD;
    # Remove any untracked files
    git clean -fd;
    e_header "Syncing dotfiles...";
    # Pull down the latest changes
    git pull --rebase origin master;
  else
    e_header "Already a Git repo.";
  fi;
else
  e_header "Skipping 'git init'";
fi;


# Sets the dotfiles in place in the `HOME` directory.
function set_files() {
  e_header "Setting files...";

  # A list of needed directories
  declare -a DIRECTORIES=(
    $HOME/.functions
    $HOME/.vim
    $HOME/.vim/backups
    $HOME/.vim/swaps
  );

  # Create directories if they don't exist
  for DIRECTORY in ${DIRECTORIES[*]}; do
    mkdirs ${DIRECTORY};
  done;

  # Copy `.gitconfig`
  rsync -avz --quiet "dev/gitconfig" "$HOME/.gitconfig";

  # Download the Solarized Vim theme
  # But check for it first
  if [[ ! -r "$HOME/.vim/colors/solarized.vim" ]]; then
    if [[ $SERVER ]]; then
      # Extract colors/solarized.vim into .vim (Linux-friendly)
      e_header "Downloading Solarized Vim theme...";
      curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | tar -xzv -C "$HOME/.vim" --strip-components 1 --wildcards **/solarized.vim;
    else
      # Extract colors/solarized.vim into .vim (OS X-Friendly)
      e_header "Downloading Solarized Vim theme...";
      curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | tar -xzv -C "$HOME/.vim" --strip-components 1 --include="**/solarized.vim";
    fi;
    [[ $? ]] && e_success "Solarized theme installed";
  else
    e_header "Solarized theme already installed.";
  fi;

  # Files and folders not to be linked/copied
  declare -a EXCLUDED_FILES=(
    dev/gitconfig # Already copied
    shell/
    shell/functions
  );

  # Strip the shell and dev directories from the path before setting these files
  dotfiles dev/* shell/* shell/**/* --strip-dir;

  [[ $? ]] && e_success "Dotfiles update complete!";
}


# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles.";

# Conditionally set the dotfiles in place
if is_confirmed; then
  set_files;
else
  e_header "Aborting...";
  exit 1;
fi;


# Prompt to create the dotfiles.local file if it doesn't exist
if [[ ! -r "$HOME/.dotfiles.local" ]] ; then
  printf "\n";
  e_warning "Enter your Git author information";
  collect_git_info;
else
  # Source the file to capture the variables
  source "$HOME/.dotfiles.local";
  # If the file exists, but the author info isn't
  if [[ -z "$GIT_AUTHOR_NAME" || -z "$GIT_AUTHOR_EMAIL" ]]; then
    printf "\n";
    e_warning "Enter your Git author information";
    collect_git_info;
  else
    # Print Git author info for confirmation
    printf "\n###  GIT AUTHOR INFO  ###\n"; # Just some dumb formatting
    echo " Name:" $GIT_AUTHOR_NAME;
    echo "Email:" $GIT_AUTHOR_EMAIL;

    # Seek confirmation that the Git information above is correct.
    printf "\n";
    e_warning "Confirm the Git information above is correct.";
    read -p "Is this correct? (y/n) " -n 1;
    printf "\n";

    if ! is_confirmed; then
      # Prompt for Git author info re-entry
      collect_git_info;
    fi;
  fi;
fi;


# Source bashrc to make sure the environment is set before moving on
source "$HOME/.bashrc";


# Conditionally install packages
if [[ $NO_PACKAGES ]]; then
  e_header "Skipping package installation...";
else
  # Install Homebrew packages
  source bin/brews;

  # Check for a previous install location
  NVM_LOC=${NVM_DIR:="$HOME/.nvm"};

  # Install NVM
  e_header "Installing NVM...";
  if [[ ! -d "$NVM_LOC" ]]; then
    git clone https://github.com/creationix/nvm.git "$NVM_LOC";
  fi;

  # Source nvm
  source "$NVM_LOC/nvm.sh";

  cd "$NVM_LOC" && git checkout `git describe --abbrev=0 --tags`;

  # Install NPM
  e_header "Installing NPM...";
  npm install -g npm@latest;
  # Install and use latest stable version of Node
  nvm install stable;
  nvm alias default stable;

  # Install packages globally and quietly
  e_header "Installing Node packages...";
  NPM_LIST="bower browser-sync git-open grunt-cli grunt-init jshint";
  npm install $NPM_LIST --global --quiet;

  [[ $? ]] && e_success "NPM packages installed.";

  # Install RVM
  e_header "Installing RVM...";
  curl -L https://get.rvm.io | bash -s stable --ignore-dotfiles --autolibs=enable --ruby;

  source "$HOME/.rvm/scripts/rvm";
  rvm cleanup all;

  # Install Gems
  e_header "Installing Gems...";
  GEM_LIST="bundler jekyll sass";
  gem install $GEM_LIST --no-document;

  gem cleanup;

  [[ $? ]] && e_success "Gems installed.";

fi;


if [[ ! $SERVER ]]; then
  # Ask before potentially overwriting OS X defaults
  seek_confirmation "Warning: This step may modify your OS X system defaults.";

  if is_confirmed; then
    source bin/osx;
  else
    e_header "Skipped OS X settings update.";
  fi;
fi;


unset COPY_FILES;


[[ $? ]] && e_success "Restart your shell for changes to take effect";
