#!/bin/bash

DOTFILES_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
DOTFILES_GIT_REMOTE="https://github.com/goodguyry/dotfiles"


# Helper functions
source "$DOTFILES_DIRECTORY/lib/help";
source "$DOTFILES_DIRECTORY/lib/utils";


# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help;
  exit;
fi;


# Test for known flags
for opt in $@;
do
  case $opt in
    --no-packages)  NO_PACKAGES=true ;;               # Suppresses installing packages
               -n)  NO_PACKAGES=true ;;
           --copy)  COPY_FILES=true ;;                # Copy files instead of linking
               -c)  COPY_FILES=true ;;
         --server)  SERVER=true; NO_PACKAGES=true ;;  # Skip OS X-related packages/settings
               -s)  SERVER=true; NO_PACKAGES=true ;;
           -*|--*)  e_warning "Warning: invalid option $opt" && run_help && exit ;;
  esac
done;


# Create a Projects folder
if [[ ! $SERVER ]]; then
  mkdirs "$HOME/Projects";
fi;


# Create a ~/.bin directory, if it doesn't exist
mkdirs "$HOME/.bin";


# Conditionally install Command Line Tools, Homebrew and Git
if [[ $NO_PACKAGES ]]; then
  e_header "Skipping Homebrew and Git installations.";
else
  # Before relying on Homebrew, check that packages can be compiled
  if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first.";
    xcode-select --install;
  fi;

  # Check for Homebrew
  if ! type_exists 'brew'; then
    e_header "Installing Homebrew...";
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)";
    brew doctor;
    [[ $? ]] && e_success "Homebrew installed.";
  fi;

  # Check for git
  if ! type_exists 'git'; then
    e_header "Updating Homebrew...";
    brew update;
    e_header "Installing Git...";
    brew install git;
    ln -sf "$(brew --prefix)/share/git-core/contrib/diff-highlight/diff-highlight" "$HOME/.bin/diff-highlight";
  fi;
fi;


# Conditionally init and pull the Git repo
if [[ ! $COPY || ! $SERVER ]] && type_exists 'git' ; then
  cd "$DOTFILES_DIRECTORY";
  # Initialize the git repository if it's missing
  if ! is_git_repo; then
    e_header "Initializing git repository...";
    git init;
    git remote add origin $DOTFILES_GIT_REMOTE;
    git fetch origin master;
    # Reset the index and working tree to the fetched HEAD
    git reset --hard FETCH_HEAD;
    # Remove any untracked files
    git clean -fd;
    e_header "Syncing dotfiles...";
    # Pull down the latest changes
    git pull --rebase origin master;
  else
    e_header "Already a Git repo.";
  fi;
else
  e_header "Skipping 'git init'";
fi;


# Sets the dotfiles in place in the `HOME` directory.
function set_files() {
  e_header "Setting files...";

  # Helper function
  # Conditionally symlink or copy the files
  function set_file() {
    local SRC="$DOTFILES_DIRECTORY/$1";
    local DEST="$2";
    if [[ $COPY_FILES ]]; then
      rsync -avz --quiet $SRC $DEST;
    else
      # Force create/replace the symlink.
      ln -fs $SRC $DEST;
    fi
  }

  # List of directories
  declare -a DIRECTORIES=(
    .vim/backups
    .vim/swaps
  );

  # Create directories
  for DIRECTORY in ${DIRECTORIES[*]}; do
    if [[ ! -d "$HOME/${DIRECTORY}" ]]; then
      mkdir -p "$HOME/${DIRECTORY}";
      echo "Created $HOME/${DIRECTORY}";
    fi;
  done;

  # Dev
  set_file "dev/gitignore"                        "$HOME/.gitignore";
  set_file "dev/jshintrc"                         "$HOME/.jshintrc";
  set_file "dev/editorconfig"                     "$HOME/.editorconfig";
  set_file "dev/vimrc"                            "$HOME/.vimrc";

  # Shell
  set_file "shell/aliases"                        "$HOME/.aliases";
  set_file "shell/bash_config"                    "$HOME/.bash_config";
  set_file "shell/bashrc"                         "$HOME/.bashrc";
  set_file "shell/functions"                      "$HOME/.functions";
  set_file "shell/hushlogin"                      "$HOME/.hushlogin";
  set_file "shell/inputrc"                        "$HOME/.inputrc";
  set_file "shell/paths"                          "$HOME/.paths";
  set_file "shell/profile"                        "$HOME/.profile";
  set_file "shell/prompt"                         "$HOME/.prompt";

  # Set Sublime Text settings directory
  SUBLIME_TEXT_USER="$HOME/Library/Application Support/Sublime Text 3/Packages/User";
  # Create the directory path if it doesn't exist
  mkdir -p "$SUBLIME_TEXT_USER";

  # Sublime Text settings
  set_file "etc/Markdown.sublime-settings"        "$SUBLIME_TEXT_USER/Markdown.sublime-settings";
  set_file "etc/Preferences.sublime-settings"     "$SUBLIME_TEXT_USER/Preferences.sublime-settings";
  set_file "etc/Ruby.sublime-settings"            "$SUBLIME_TEXT_USER/Ruby.sublime-settings";

  # Download the Solarized Vim theme
  # But check for it first
  if [[ ! -r "$HOME/.vim/colors/solarized.vim" ]]; then
    if [[ $SERVER ]]; then
      # Extract colors/solarized.vim into .vim (Linux-friendly)
      e_header "Downloading Solarized Vim theme...";
      curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | tar -xzv -C "$HOME/.vim" --strip-components 1 --wildcards **/solarized.vim;
    else
      # Extract colors/solarized.vim into .vim (OS X-Friendly)
      e_header "Downloading Solarized Vim theme...";
      curl -#L https://github.com/altercation/vim-colors-solarized/tarball/master | tar -xzv -C "$HOME/.vim" --strip-components 1 --include="**/solarized.vim";
    fi;
    [[ $? ]] && e_success "Solarized theme installed";
  else
    e_header "Solarized theme already installed.";
  fi;

  e_success "Dotfiles update complete!";
}


# Ask before potentially overwriting files
printf "\n";
e_warning "Warning: This step may overwrite your existing dotfiles.";
printf "Continue? [Y/n]";
read CONTINUE;
printf "\n";


# Conditionally set the dotfiles in place
if [[ "$CONTINUE" == "n" ]]; then
  e_header "Aborting...";
  exit 1;
else
  set_files;
fi;


# Create dotfiles.local if not present
[[ -r "$HOME/.dotfiles.local" ]] && printf "#!/bin/bash\n\n" >> "$HOME/.dotfiles.local";


# Add git config settings
source bin/gitconfig;


# Source bashrc to make sure the environment is set before moving on
source "$HOME/.bashrc";


# Conditionally install packages
if [[ $NO_PACKAGES ]]; then
  e_header "Skipping package installation...";
else
  # Install Homebrew packages
  source bin/brews;
  # Install Homebrew packages
  source bin/nvm;
  # Install Homebrew packages
  source bin/rvm;

  # Change to bash 4 installed by bin/brews
  if [[ ! $(grep "/usr/local/bin/bash" /etc/shells) ]]; then
    echo /usr/local/bin/bash|sudo tee -a /etc/shells && chsh -s /usr/local/bin/bash;
    e_success "Shell switched to Bash 4";
  else
    e_header "/usr/local/bin/bash already in /etc/shells";
  fi;
fi;


if [[ ! $SERVER ]]; then
  # Ask before potentially overwriting files
  printf "\n";
  e_warning "Warning: This step may modify your OS X system defaults.";
  printf "Continue? [Y/n]";
  read SET_OSX;
  printf "\n";


  # Conditionally set defaults
  if [[ "$SET_OSX" == "n" ]]; then
    e_header "Skipped OS X settings update.";
  else
    source bin/osx;
  fi;
fi;


unset COPY_FILES;


[[ $? ]] && e_success "Restart your shell for changes to take effect";
