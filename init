#!/bin/bash

DOTFILES_DIRECTORY=$(pwd)
DOTFILES_GIT_REMOTE="https://github.com/goodguyry/dotfiles"


source $DOTFILES_DIRECTORY/local/help
source $DOTFILES_DIRECTORY/local/create_extras
source $DOTFILES_DIRECTORY/local/utils


# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help
  exit
fi


# Test for known flags
for opt in $@
do
  case $opt in
    --no-packages) no_packages=true ;;  # Suppresses installing packages
    --copy) copy_files=true;;           # Copy files instead of linking
    -*|--*) e_warning "Warning: invalid option $opt" && run_help && exit ;;
  esac
done


# Create the Projects directory if it doesn't exist
if [[ -r "~/Projects" && ! -d "~/Projects" ]]; then
  mkdir Projects
else
  e_header "Projects directory already exists in ~/"
fi


# Conditionally install Command Line Tools, Homebrew and Git
if [[ $no_packages ]]; then
  e_header "Skipped Homebrew and Git installations."
else
  # Before relying on Homebrew, check that packages can be compiled
  if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    xcode-select --install
  fi

  # Check for Homebrew
  if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
    brew doctor
  fi

  # Check for npm
  if ! type_exists 'npm'; then
    e_header "Installing Node..."
    brew install node
  fi

  # Check for git
  if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
  fi
fi


# Create the .bin/ directory if it doesn't exist
if [[ -r "~/.bin" && ! -d "~/.bin" ]]; then
  mkdir .bin
else
  e_header ".bin directory already exists in ~/"
fi


# Conditionally sym link or copy the files
function setFile() {
  if [[ $copy_files ]] ; then
    rsync -avz --quiet "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
  else
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
  fi
}


# Create symbolic links between the dotfiles repo and `HOME` directory.
function setFiles() {
  e_header "Linking files..."

  # Copy `.gitconfig`.
  rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

  setFile "bash/aliases"                  ".aliases"
  setFile "bash/bash_config"              ".bash_config"
  setFile "bash/bash_paths"               ".bash_paths"
  setFile "bash/bash_profile"             ".bash_profile"
  setFile "bash/bash_prompt"              ".bash_prompt"
  setFile "bash/bashrc"                   ".bashrc"
  setFile "bash/functions"                ".bash_functions"
  setFile "bash/functions/batchrename"    ".bash_functions/batchrename"
  setFile "bash/functions/common"         ".bash_functions/common"
  setFile "bash/functions/timestamp"      ".bash_functions/timestamp"
  setFile "bash/inputrc"                  ".inputrc"
  setFile "git/git_completion"            ".git_completion"
  setFile "git/gitignore"                 ".gitignore"
  setFile "hushlogin"                     ".hushlogin"

  e_success "Dotfiles update complete!"
}


# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
  setFiles
  source ${HOME}/.bashrc
else
  e_header "Aborting..."
  exit 1
fi


# Prompt to create the extras file if it doesn't already exists
if [[ ! -r "$HOME/.extras" ]] ; then
  seek_confirmation "Would you like to create the '.extras' file now?"

  if is_confirmed; then
    printf "Your Git author name: -> "
    read NAME
    printf "Your Git author email: -> "
    read EMAIL
    if [[ $NAME != '' && $EMAIL != '' ]] ; then
      create_extras "$NAME" $EMAIL
    fi
  else
    e_warning "You will need to create the extras file manually."
  fi
else
  e_header "Confirm your Git credentials."
  open ~/.extras
  sleep 3
  # Bring attention back to Terminal
  tput bel
fi


# conditionally init and pull the Git repo
if [[ !$copy_files ]] ; then
  cd "${DOTFILES_DIRECTORY}"
  # Initialize the git repository if it's missing
  if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
  else
    e_header "Skipping 'git init'"
  fi
fi


# Conditionally install and update packages
if [[ $no_packages ]]; then
  e_header "Skipped package installations."
  e_warning "You can install these later."
else
  e_header "Updating packages...\n"
  ./bin/brew
  ./bin/casks
  ./bin/rvm
  ./bin/npm
  ./bin/downloads
fi


# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
  bash ./bin/osx
else
  e_header "Skipped OS X settings update."
fi


unset copy_files

exec $SHELL -l