#!/bin/bash


# ***
# Help text
# ***
function run_help() {

cat <<EOT

Dotfiles - Ryan Domingue - http://ryandomingue.com/

Usage: $(basename "$0") [options]

Options:
    -h, --help      Print this help text
    --copy          Copy the files in place instead of linking
    --no-packages   Suppress package installations and updates (including casks)
    --server        Skip OS X-related packages/settings

 Notes:

 1. `gitconfig` is always copied, regardless of the option passed.
 2. `--copy` and `--server` also suppress initializing a Git repo and pulling updates from Github

Documentation can be found at https://github.com/goodguyry/dotfiles

Copyright (c) Ryan Domingue
Licensed under the MIT license.
EOT

}


# ***
# Creates the .gitconfig.local file with Git credentials
# Used to add custom Git aliases and configuration without the need to fork this entire repository
# ***
function local_git_config() {
  LOCAL_GIT_CONFIG="$HOME/.gitconfig.local";
  touch "$LOCAL_GIT_CONFIG";

  printf "\n# Git author info\n\n" >> "$LOCAL_GIT_CONFIG";

  printf "# Your name\n" >> "$LOCAL_GIT_CONFIG";
  printf "GIT_AUTHOR_NAME=\"${1}\"\n\n" >> "$LOCAL_GIT_CONFIG";

  printf "# Your email\n" >> "$LOCAL_GIT_CONFIG";
  printf "GIT_AUTHOR_EMAIL=\"${2}\"\n\n" >> "$LOCAL_GIT_CONFIG";

  printf "GIT_COMMITTER_NAME=\"\$GIT_AUTHOR_NAME\"\n" >> "$LOCAL_GIT_CONFIG";
  printf "GIT_COMMITTER_EMAIL=\"\$GIT_AUTHOR_EMAIL\"\n\n" >> "$LOCAL_GIT_CONFIG";

  printf "# Set the user info (modifies ~/.gitconfig)\n" >> "$LOCAL_GIT_CONFIG";
  printf "git config --global user.name \"\$GIT_AUTHOR_NAME\"\n" >> "$LOCAL_GIT_CONFIG";
  printf "git config --global user.email \"\$GIT_AUTHOR_EMAIL\"\n" >> "$LOCAL_GIT_CONFIG";
}
