#!/bin/bash


# ***
# Help text
# ***
function run_help() {

cat <<EOT

Dotfiles - Ryan Domingue - http://ryandomingue.com/

Usage: $(basename "$0") [options]

Options:
    -h, --help            Print this help text
    -c, --copy            Copy the files in place instead of linking
    -n, --no-packages     Suppress package installations and updates (including casks)
    -s, --server          Skip OS X-related packages/settings

 Notes:

 1. `gitconfig` is always copied, regardless of the option passed.
 2. `--copy` and `--server` also suppress initializing a Git repo and pulling updates from Github

Documentation can be found at https://github.com/goodguyry/dotfiles

Copyright (c) Ryan Domingue
Licensed under the MIT license.
EOT

}


# Create a directory if it doesn't already exist
function mkdirs() {
  if [[ ! -d $@ ]]; then
    mkdir $@;
    echo "Created $@";
  fi;
}


function dotfiles() {
  # Test for --strip-dir option
  if [[ $@ =~ "--strip-dir" ]] ; then
    STRIP=true;
    # Remove "--strip-dir"
    DIR=${@//--strip-dir};
  else
    STRIP=false;
    DIR="$@";
  fi;

  function set_file() {
    local SRC="$DOTFILES_DIRECTORY/$1";
    local DEST="$HOME/.$2";
    if [[ $COPY_FILES ]]; then
      rsync -avz --quiet $SRC $DEST;
    else
      # Force create/replace the symlink.
      ln -fs $SRC $DEST;
    fi;
  }

  for index in $DIR; do
    ITEM="${index}";
    if [[ ! " ${EXCLUDED_FILES[@]} " =~ " ${index} " ]]; then
      # This file is not in the exclude list
      if $STRIP; then
        # Strip the directory from the origin path
        ITEM="${index#*/}";
      fi;
      if [[ -r ${index} ]]; then
        set_file ${index} ${ITEM};
      fi;
    fi;
    unset ITEM;
  done;

  unset STRIP;
  unset DIR;
}


# ***
# Collect Git author info
# ***
function collect_git_info() {
  COLLECTED=0;
  while [[ $COLLECTED -lt 1 ]]; do

    printf "Your Git author name: -> ";
    read NAME;
    printf "Your Git author email: -> ";
    read EMAIL;

    if [[ $NAME != '' && $EMAIL != '' ]] ; then
      # Print Git author info for confirmation
      printf "\n###  GIT AUTHOR INFO  ###\n"; # Just some dumb formatting
      echo " Name: $NAME";
      echo "Email: $EMAIL";
      printf "\n";

      e_warning "Confirm the Git information above is correct.";

      # Prompt for confirmation
      printf "Is this correct? [Y/n] ";
      read GIT_AUTHOR;
      printf "\n";

      if [[ $GIT_AUTHOR =~ ^[Yy]$ || $GIT_AUTHOR = '' ]]; then
        # Confirmed
        COLLECTED=1;
        local_git_config  "$NAME" $EMAIL;
      fi;
    fi;
  done;
}


# ***
# Creates .dotfiles.local if not present
# Adds Git author author values if not present
# Updates author info in place if present
# ***
function local_git_config() {
  DOTFILES_LOCAL="$HOME/.dotfiles.local";

  # Create dotfiles.local if not present
  [[ -r "$DOTFILES_LOCAL" ]] && printf "#!/bin/bash\n\n" >> "$DOTFILES_LOCAL";

  # Check for "Begin" comment
  if [[ ! $(grep "# --- Begin Git author values" $DOTFILES_LOCAL ) ]]; then
    # Add values to dotfiles.local
    printf "\n\n# --- Begin Git author values\n" >> "$DOTFILES_LOCAL";

    # Collected values
    printf "GIT_AUTHOR_NAME=\"${1}\"\n" >> "$DOTFILES_LOCAL";
    printf "GIT_AUTHOR_EMAIL=\"${2}\"\n\n" >> "$DOTFILES_LOCAL";

    printf "# Environment variables\n" >> "$DOTFILES_LOCAL";
    printf "GIT_COMMITTER_NAME=\"\$GIT_AUTHOR_NAME\"\n" >> "$DOTFILES_LOCAL";
    printf "GIT_COMMITTER_EMAIL=\"\$GIT_AUTHOR_EMAIL\"\n\n" >> "$DOTFILES_LOCAL";

    printf "# Set the user info (modifies ~/.gitconfig)\n" >> "$DOTFILES_LOCAL";
    printf "git config --global user.name \"\$GIT_AUTHOR_NAME\"\n" >> "$DOTFILES_LOCAL";
    printf "git config --global user.email \"\$GIT_AUTHOR_EMAIL\"\n" >> "$DOTFILES_LOCAL";

    printf "# --- End Git author values\n" >> "$DOTFILES_LOCAL";
  else
    # Edit values in place
    sed -i -e "s/\(GIT_AUTHOR_NAME\)=\"\(.*\)\"/\1=\"$1\"/" "$DOTFILES_LOCAL";
    sed -i -e "s/\(GIT_AUTHOR_EMAIL\)=\"\(.*\)\"/\1=\"$2\"/" "$DOTFILES_LOCAL";
  fi;
}
