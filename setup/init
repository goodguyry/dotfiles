#!/bin/bash

DOTFILES_DIRECTORY=$(pwd)
DOTFILES_GIT_REMOTE="https://github.com/goodguyry/dotfiles"

source $DOTFILES_DIRECTORY/lib/help
source $DOTFILES_DIRECTORY/create_extras
source $DOTFILES_DIRECTORY/local/utils

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  run_help
  exit
fi

# Test for known flags
for opt in $@
do
  case $opt in
    --no-packages) no_packages=true ;;  # Suppresses installing packages
    --copy) copy_files=true;;           # Copy files instead of linking
    -*|--*) e_warning "Warning: invalid option $opt" && run_help && exit ;;
  esac
done

# Create the Projects directory if it doesn't exist
if [[ -r "~/Projects" && ! -d "~/Projects" ]]; then
  mkdir Projects
else
  e_header "Projects directory already exists in ~/"
fi

# Conditionally install Command Line Tools, Homebrew and Git
if [[ $no_packages ]]; then
  e_header "Skipped Homebrew and Git installations."
else
  # Before relying on Homebrew, check that packages can be compiled
  if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    xcode-select --install
  fi

  # Check for Homebrew
  if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
    brew doctor
  fi

  # Check for npm
  if ! type_exists 'npm'; then
    e_header "Installing Node..."
    brew install node
  fi

  # Check for git
  if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
  fi
fi

# Concatenate function files into bash_functions
CAT_LIST="";

for i in functions/* ; do
  if [[ -r "$i" && "$i" != "../functions/core" ]] ; then
    CAT_LIST+="$i "
  fi
done

cat functions/core $CAT_LIST > bash_functions

# Files to copy/link
INCLUDES_LIST=(aliases bash_profile bash_prompt bashrc git_completion gitignore hushlogin bash_functions local/exports local/utils)

function copyFiles() {

  # Add gitconfig to list of files to copy
  INCLUDES_LIST+=(gitconfig)

  e_header "Copying files over..."

  for i in ${INCLUDES_LIST[@]} ; do
    # If the file already exists, remove it
    [ -h "${HOME}/.${i}" ] && rm -r "${HOME}/.${i}"
    # Add a trailing slash to directories
    [ -d "$i" ] && i="${i}/"
    cp -fR "${DOTFILES_DIRECTORY}/$i" "${HOME}/.${i}"
  done

}

function symlinkFiles() {

  e_header "Linking files..."

  for i in ${INCLUDES_LIST[@]} ; do
    [ -e "${HOME}/.${i}" ] && rm -r "${HOME}/.${i}"
    ln -vfFs "${DOTFILES_DIRECTORY}/$i" "${HOME}/.${i}"
  done

  cp -i "${DOTFILES_DIRECTORY}/gitconfig" "${HOME}/.gitconfig"

}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
  if [[ $copy_files ]] ; then
    copyFiles
  else
    symlinkFiles
  fi
  source ${HOME}/.bash_profile
else
  e_header "Aborting..."
  exit 1
fi

# Prompt to create the extras file if it doesn't already exists
if [[ ! -r "$HOME/.extras" ]] ; then
  seek_confirmation "Would you like to create the '.extras' file now?"

  if is_confirmed; then
    printf "Your Git author name: -> "
    read NAME
    printf "Your Git author email: -> "
    read EMAIL
    if [[ $NAME != '' && $EMAIL != '' ]] ; then
      create_extras "$NAME" $EMAIL
    fi
  else
    e_warning "You will need to create the extras file manually."
  fi
else
  e_header "Confirm your Git credentials."
  open ~/.extras
  sleep 3
  # Bring attention back to Terminal
  tput bel
fi

# conditionally init and pull the Git repo
if [[ !$copy_files ]] ; then
  cd "${DOTFILES_DIRECTORY}"
  # Initialize the git repository if it's missing
  if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
  else
    e_header "Skipping 'git init'"
  fi
fi

# Conditionally install and update packages
if [[ $no_packages ]]; then
  e_header "Skipped package installations."
  e_warning "You can run './setup/packages' to install these later."
else
  e_header "Updating packages...\n"
  ./setup/packages
fi

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
  bash ./local/bin/osx
else
  e_header "Skipped OS X settings update."
fi

unset copy_files

exec $SHELL -l