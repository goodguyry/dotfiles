#!/bin/bash

##
# Change to a given project directory.
# If no PROJECTNAME is passed, change to ~/Projects.
#
# Usage: p [-o] PROJECTNAME
#   -o  Open the project directory in your editor and git client.
##
function p() {
  # Check for passed argument(s).
  if [[ ${#} -gt 0 ]]; then
    local OPEN=false;

    # Test for option(s)
    for OPT in "${@}"; do
      case "${OPT}" in
        -o) OPEN=true ;;
         *) DIR="${OPT}" ;;
      esac
    done

    FIND_ARGS="-maxdepth 1 -mindepth 1 -type d -name ${DIR} -print -quit";

    local SITE=$(find "${HOME}"/Projects/sites $FIND_ARGS);
    local PROJECT=$(find "${HOME}"/Projects $FIND_ARGS);

    # Change to the project root.
    if [[ -n "${PROJECT}" ]]; then
      cd "${PROJECT}";
    elif [[ -n "${SITE}" ]]; then
      cd "${SITE}";
    else
      echo "\"${DIR}\" not found.";
      return;
    fi

    if $OPEN; then
      # Open the project root in the editor
      if [[ "$(type -P subl)" ]]; then
        SUBLIME_WORKSPACE=$(find . -type f -name "*.sublime-workspace");
        subl $([[ -r "${SUBLIME_WORKSPACE}" ]] && echo "${SUBLIME_WORKSPACE}" || echo '.');
      fi

      # Open the project in the git client
      [[ "$(type -P smerge)" ]] && smerge .;
    fi
  else
    # No arguments; change to $HOME/Projects.
    cd "${HOME}/Projects";
  fi;
}

# Change working directory to the top-most Finder window location.
# http://helpx.adobe.com/photoshop/kb/unit-type-conversion-error-applescript.html
function cdf() { # short for `cdfinder`
  if [ "$(type -P osascript)" ]; then
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
  fi
}

# Create a new directory and enter it.
function mkd() {
  mkdir -p "${@}" && cd "${@}";
}

# Hide individual file(s).
function hide() {
  chflags hidden "${@}";
}

# Unhide individual file(s).
function unhide() {
  chflags nohidden "${@}";
}

# Recursively delete files that match a certain pattern.
# (by default delete all `.DS_Store` files).
cleanup() {
  local Q="${1:-*.DS_Store}";
  find . -type f -name "${Q}" -ls -delete;
}

# Determine size of a file or total size of a directory.
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi;
  if [[ -n "${@}" ]]; then
    du $arg -- "${@}";
  else
    du $arg .[^.]* *;
  fi;
}

# git branch ahead/behind another.
function gcheck() {
  # use first argument or master.
  local ORIGINAL=${1-master};

  # use the second argument or current branch if not given.
  local CURRENT="$(git branch | grep \* | sed s/\*\ //)";
  local COMPARE=${2-$CURRENT};

  # run git rev-list and capture numbers returned.
  local RESULT="$(git rev-list --left-right --count ${ORIGINAL}...${COMPARE})";

  local NUMBERS=(${RESULT});
  printf '\n';
  # print numbers in a pretty message.
  if [ ${NUMBERS[0]} -gt 0 ]; then
    echo -e "${ORANGE}- ${COMPARE} is ${NUMBERS[0]} commits behind ${ORIGINAL}${RESET}";
  fi;
  if [ ${NUMBERS[1]} -gt 0 ]; then
    echo -e "${YELLOW}+ ${COMPARE} is ${NUMBERS[1]} commits ahead of ${ORIGINAL}${RESET}";
  fi;
}

# Use Git’s colored diff when available.
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "${@}";
  }
fi;

# Create a data URI from a file.
function datauri() {
  local MIMETYPE="$(file -b --mime-type "${1}")";
  if [[ "${MIMETYPE}" == text/* ]]; then
    MIMETYPE="${MIMETYPE};charset=utf-8";
  fi;
  echo "data:${MIMETYPE};base64,$(openssl base64 -in "$1" | tr -d '\n')" | pbcopy;
  echo 'The data URI is on the clipboard.';
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression.
function targz() {
  local TMPFILE="${@%/}.tar";
  tar -cvf "${TMPFILE}" --exclude='.DS_Store' "${@}" || return 1;

  size=$(
    stat -f"%z" "${TMPFILE}" 2> /dev/null; # macOS `stat`
    stat -c"%s" "${TMPFILE}" 2> /dev/null; # GNU `stat`
  );

  local CMD="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it.
    CMD='zopfli';
  else
    if hash pigz 2> /dev/null; then
      CMD='pigz';
    else
      CMD='gzip';
    fi;
  fi;

  echo "Compressing .tar using \`${CMD}\`…";
  "${CMD}" -v "${TMPFILE}" || return 1;
  [ -f "${TMPFILE}" ] && rm "${TMPFILE}";
  echo "${TMPFILE}.gz created successfully.";
}

# Compare original and gzipped file size.
function gz() {
  local ORIGSIZE=$(wc -c < "${1}");
  local GZIPSIZE=$(gzip -c "${1}" | wc -c);
  local RATIO=$(echo "${GZIPSIZE} * 100/ ${ORIGSIZE}" | bc -l);
  printf "orig: %d bytes\n" "${ORIGSIZE}";
  printf "gzip: %d bytes (%2.2f%%)\n" "${GZIPSIZE}" "${RATIO}";
}

# Start an HTTP server from a directory, optionally specifying the port.
function server() {
  local PORT="${1:-8000}";
  sleep 1 && open "http://localhost:${PORT}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`.
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files).
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "${PORT}";
}

# Get the closest ansi color for a hex value
# https://unix.stackexchange.com/a/269085
function fromhex() {
    hex=${1#"#"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' ${hex#??})
    b=$(printf '0x%0.2s' ${hex#????})
    printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 +
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}

##
# Add a timestamp to a file or folder; optionally copy the timestamp to the clipboard.
#
# Usage: stamp [-d] string
#
#   -d (optional) : duplicate item before appending the timestamp
#   -c (optional) : copy the timestamp to the clipboard
#   -s=SEPARATOR (optional) : set the separator between the item name and the timestamp
#
# Change date format in $stamp to alter output.
##

function run_stamp_help() {

cat <<EOT
Usage: stamp [-d] [-c] [-s=SEPARATOR]

Options:
    -h, --help        Print this help text
    -d                Duplicate the item before appending the timestamp
    -c                Copy the timestamp to the clipboard
    -s=SEPARATOR      Define the separator between the itme name and the timestamp
EOT
}

function stamp() {
  # Help text
  if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
    run_stamp_help;
    return;
  fi;

  local ERRORMSG='Error: A file or folder is required for timestamping';
  local STAMP="$(date +%Y%m%d_%H%M%S)";
  local DUP=false;
  local CLIPBOARD=false;
  local SEP=${STAMP_SEPARATOR:="."}; # Default separator

  # No args were given.
  if [[ ${#} -lt 1 ]]; then
    run_stamp_help;
    return;
  fi;

  # Test for flags.
  for OPT in "${@}"; do
    case "${OPT}" in
      -d) DUP=true ;;              # Duplicate the item before appending the timestamp.
      -c) CLIPBOARD=true ;;        # Copy the timestamp to the clipboard.
      -s*) SEP="${OPT##*-s=}" ;;   # Set the separator between the itme name and the timestamp.
      *) ITEM="${OPT}" ;;          # Set ITEM to the other argument.
    esac
  done;

  # Copy the timestamp to the clipboard and exit.
  if $CLIPBOARD; then
    $(echo "${STAMP}" | pbcopy);
    echo "${STAMP} copied to the clipboard.";
    # Exit if there's no file/directory passed.
    if [[ -z "${ITEM}" ]]; then
      return;
    fi;
  fi;

  # Make sure ITEM is set before proceeding.
  if [[ -z "${ITEM}" ]]; then
    run_stamp_help;
    return;
  fi;

  if [[ -d "${ITEM}" ]]; then
    # Split off the trailing slash (if it's there).
    NAME="${ITEM%/*}";
    # Clear the extension.
    EXT="";
  else
    # Split the name from the extension.
    NAME="${ITEM%.*}";
    # Include the dot in the extension to make things easier in the next step.
    EXT=".${ITEM##*.}";
  fi

  if $DUP; then
    # Duplicate the item with timestamp.
    cp -r "${NAME}"{,"${SEP}${STAMP}"}"${EXT}";
  else
    # Timestamp the item without duplication.
    mv "${NAME}"{,"${SEP}${STAMP}"}"${EXT}";
  fi;

  unset SEP;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
